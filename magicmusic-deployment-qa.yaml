apiVersion: v1
kind: Namespace
metadata:
  name: magicmusic-qa
  annotations:
    name: magicmusic-qa
  labels:
    aws-observability: enabled
    app: magicmusic-qa

---

apiVersion: v1
kind: Service
metadata:
  name: db-service
  namespace: magicmusic-qa
spec:
  ports:
    - port: 3306
      targetPort: 3306
  selector:
    app: db
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-deployment
  namespace: magicmusic-qa
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
        - name: db
          image: mysql:8.0
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "root_password"
            - name: MYSQL_DATABASE
              value: "greeting_app"
            - name: MYSQL_USER
              value: "user"
            - name: MYSQL_PASSWORD
              value: "password"
          volumeMounts:
            - name: init-sql
              mountPath: /docker-entrypoint-initdb.d
              readOnly: true
      volumes:
        - name: init-sql
          configMap:
            name: db-init-sql

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: db-init-sql
  namespace: magicmusic-qa
data:
  init.sql: |
    CREATE DATABASE IF NOT EXISTS greeting_app;
    CREATE USER IF NOT EXISTS 'user'@'%' IDENTIFIED BY 'password';
    GRANT ALL PRIVILEGES ON greeting_app.* TO 'user'@'%';
    FLUSH PRIVILEGES;

    USE greeting_app;

    CREATE TABLE users (
        id INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(255) NOT NULL
    );

---

apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: magicmusic-qa
spec:
  ports:
    - port: 5000
      targetPort: 5000
  selector:
    app: backend
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: magicmusic-qa
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: tayebe/magicmusic-be:v1.1.1
          ports:
            - containerPort: 5000
          env:
            - name: MYSQL_USER
              value: "user"
            - name: MYSQL_PASSWORD
              value: "password"
            - name: MYSQL_DB
              value: "greeting_app"
            - name: MYSQL_HOST
              value: "db-service"
          imagePullPolicy: Always
          readinessProbe:
            tcpSocket:
              port: 5000
            initialDelaySeconds: 15
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: 5000
            initialDelaySeconds: 10
            periodSeconds: 10

---

apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: magicmusic-qa
spec:
  ports:
    - port: 3000
      targetPort: 3000
  selector:
    app: frontend
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: magicmusic-qa
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: tayebe/magicmusic-fe:v1.1.1
          ports:
            - containerPort: 3000
          imagePullPolicy: Always
          readinessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 10
            periodSeconds: 10

---

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mynetwork-policy
  namespace: magicmusic-qa
spec:
  podSelector:
    matchLabels:
      app: backend
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: frontend
      ports:
        - protocol: TCP
          port: 5000

---

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mynetwork-policy-db
  namespace: magicmusic-qa
spec:
  podSelector:
    matchLabels:
      app: db
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: backend
      ports:
        - protocol: TCP
          port: 3306
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mynetwork-policy
  namespace: magicmusic-qa
spec:
  podSelector:
    matchLabels:
      app: backend
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: frontend
      ports:
        - protocol: TCP
          port: 5000
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mynetwork-policy-db
  namespace: magicmusic-qa
spec:
  podSelector:
    matchLabels:
      app: db
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: backend
      ports:
        - protocol: TCP
          port: 3306